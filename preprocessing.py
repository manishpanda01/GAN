# -*- coding: utf-8 -*-
"""Preprocessing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1U-66i9C37TNO7DiZ9ssOJ_Rm6v7vAO18
"""



import os
import nibabel as nib
import imageio
import numpy as np
import re

# Define your paths
# input_folder = 'path_to_your_nii_files'
# output_folder = 'path_to_output_folders'

# Create output folders if they don't exist
classes = ['AD', 'CN', 'EMCI', 'LMCI', 'MCI']
for cls in classes:
    os.makedirs(os.path.join(output_folder, cls), exist_ok=True)

# Function to convert nii to png or jpeg
def nii_to_image(nii_file, output_file):
    img = nib.load(nii_file)
    img_data = img.get_fdata()
    # Extract the middle slice of the 3D image data
    middle_slice = img_data[:, :, img_data.shape[2] // 2]
    # Normalize the data to the range [0, 255] for saving as an image
    middle_slice = (255 * (middle_slice - np.min(middle_slice)) / (np.max(middle_slice) - np.min(middle_slice))).astype(np.uint8)
    imageio.imwrite(output_file, middle_slice)

# Regular expression pattern to match filenames like MNI_AD1.nii, MNI_CN89.nii, etc.
pattern = re.compile(r'MNI_(AD|CN|EMCI|LMCI|MCI)\d+\.nii')

# Process each nii file
for filename in os.listdir(input_folder):
    if pattern.match(filename):
        file_path = os.path.join(input_folder, filename)
        class_name = re.search(r'MNI_(AD|CN|EMCI|LMCI|MCI)', filename).group(1)
        output_file = os.path.join(output_folder, class_name, filename.replace('.nii', '.png'))
        nii_to_image(file_path, output_file)
        print(f'Converted {filename} to {output_file}')

print("Conversion completed.")

# import os
# import nibabel as nib
# import imageio
# import numpy as np
# import re
# import cv2

# # Create output folders if they don't exist
# classes = ['AD', 'CN', 'EMCI', 'LMCI', 'MCI']
# for cls in classes:
#     os.makedirs(os.path.join(output_folder, cls), exist_ok=True)

# # Function to enhance image
# def enhance_image(image):
#     # Apply histogram equalization
#     image = cv2.equalizeHist(image)
#     # Apply sharpening
#     kernel = np.array([[0, -1, 0],
#                        [-1, 5,-1],
#                        [0, -1, 0]])
#     image = cv2.filter2D(image, -1, kernel)
#     return image

# # Function to resize image
# def resize_image(image, scale_percent):
#     width = int(image.shape[1] * scale_percent / 100)
#     height = int(image.shape[0] * scale_percent / 100)
#     dim = (width, height)
#     # Resize image
#     resized = cv2.resize(image, dim, interpolation = cv2.INTER_CUBIC)
#     return resized

# # Function to convert nii to png or jpeg
# def nii_to_image(nii_file, output_file, scale_percent=200):
#     img = nib.load(nii_file)
#     img_data = img.get_fdata()
#     # Extract the middle slice of the 3D image data
#     middle_slice = img_data[:, :, img_data.shape[2] // 2]
#     # Normalize the data to the range [0, 255] for saving as an image
#     middle_slice = (255 * (middle_slice - np.min(middle_slice)) / (np.max(middle_slice) - np.min(middle_slice))).astype(np.uint8)
#     # Enhance the image
#     enhanced_image = enhance_image(middle_slice)
#     # Resize the image
#     resized_image = resize_image(enhanced_image, scale_percent)
#     # Save the image
#     imageio.imwrite(output_file, resized_image)

# # Regular expression pattern to match filenames like MNI_AD1.nii, MNI_CN89.nii, etc.
# pattern = re.compile(r'MNI_(AD|CN|EMCI|LMCI|MCI)\d+\.nii')

# # Process each nii file
# for filename in os.listdir(input_folder):
#     if pattern.match(filename):
#         file_path = os.path.join(input_folder, filename)
#         class_name = re.search(r'MNI_(AD|CN|EMCI|LMCI|MCI)', filename).group(1)
#         output_file = os.path.join(output_folder, class_name, filename.replace('.nii', '.png'))
#         nii_to_image(file_path, output_file)
#         print(f'Converted {filename} to {output_file}')

# print("Conversion completed.")

